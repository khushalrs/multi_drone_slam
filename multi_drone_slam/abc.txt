import rclpy
from rclpy.node import Node
from std_msgs.msg import Float64
from px4_msgs.msg import VehicleCommand, OffboardControlMode, TrajectorySetpoint

class PX4MultiDroneController(Node):
    def __init__(self):
        super().__init__('px4_multi_drone_controller')
        self.num_drones = 3
        self.publishers = {}
        self.parameter_set = [False] * self.num_drones

        for i in range(self.num_drones):
            namespace = f'/px4_{i}'
            self.publishers[i] = {
                'vehicle_command': self.create_publisher(VehicleCommand, f'{namespace}/fmu/vehicle_command/in', 10),
                'offboard_control_mode': self.create_publisher(OffboardControlMode, f'{namespace}/fmu/offboard_control_mode/in', 10),
                'trajectory_setpoint': self.create_publisher(TrajectorySetpoint, f'{namespace}/fmu/trajectory_setpoint/in', 10)
            }

        self.timer = self.create_timer(0.1, self.control_drones)  # Run every 100ms

    def control_drones(self):
        for i in range(self.num_drones):
            if not self.parameter_set[i]:
                self.set_parameter(i)
            self.publish_offboard_control_mode(i)
            self.publish_trajectory_setpoint(i)

    def set_parameter(self, drone_id):
        msg = VehicleCommand()
        msg.timestamp = self.get_clock().now().nanoseconds // 1000
        msg.command = VehicleCommand.VEHICLE_CMD_DO_SET_PARAMETER
        msg.param1 = 982.0  # MNT_MODE_IN
        msg.param2 = 4.0  # MAVLink control
        msg.target_system = drone_id + 1
        msg.target_component = 1
        self.publishers[drone_id]['vehicle_command'].publish(msg)
        self.get_logger().info(f"Sent parameter set command for drone {drone_id}")
        self.parameter_set[drone_id] = True

    def publish_offboard_control_mode(self, drone_id):
        msg = OffboardControlMode()
        msg.timestamp = self.get_clock().now().nanoseconds // 1000
        msg.position = True
        msg.velocity = False
        msg.acceleration = False
        msg.attitude = False
        msg.body_rate = False
        self.publishers[drone_id]['offboard_control_mode'].publish(msg)

    def publish_trajectory_setpoint(self, drone_id):
        msg = TrajectorySetpoint()
        msg.timestamp = self.get_clock().now().nanoseconds // 1000
        msg.x = 0.0
        msg.y = 0.0
        msg.z = -5.0 * (drone_id + 1)  # Different altitude for each drone
        msg.yaw = 0.0
        self.publishers[drone_id]['trajectory_setpoint'].publish(msg)
        self.get_logger().info(f"Published trajectory setpoint for drone {drone_id}: altitude = {-msg.z}")

def main(args=None):
    rclpy.init(args=args)
    node = PX4MultiDroneController()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
